import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.sql.*;

class Main {
    public static void main(String[] args) {
        new MyServer();
    }
}


class MyServer {
    ArrayList<ClientHandler> client;
    ArrayList<String> clientnick;
    ServerSocket server = null;

    public MyServer() {

        SQLHandler.connect();
        Socket s;

        client = new ArrayList<>();
        clientnick = new ArrayList<>();
        try {
            server = new ServerSocket(8189);
            while (true){

                System.out.println("Waiting for client.......");
                s = server.accept();
                System.out.println("Client connected");
                ClientHandler clientHandler = new ClientHandler(s,this);

                new Thread(clientHandler).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }finally {
            try {
                server.close();
                SQLHandler.disconnect();
            }catch (IOException e){
                e.printStackTrace();
            }

        }
    }
    public synchronized ArrayList<ClientHandler> getClient() {
        return client;
    }


    public synchronized void sendPersonalMessage(String nick, String message){
        for(ClientHandler ch : client){
            if(ch.getName().equals(nick)){
                ch.sendMsg(message);
                break;
            }
        }
    }

   
    public synchronized boolean isNickBusy(String nick){
        for (ClientHandler clientHandler: client) {
             if (clientHandler.getName().equals(nick)){
                 return true;
             }
        }
        return false;
    }

    public synchronized void addClient(ClientHandler clientHandler){
        client.add(clientHandler);
        broadCastMsg(clientHandler.getName() + " enter in chat");
        ArrayList<String> listuserArr = getClientnick();
        String listUser = "";
        for (String x: listuserArr) {
            listUser = listUser + " " + x;
        }
        for (ClientHandler c : client) {
            c.sendMsg("/listuser" + listUser);
        }
    }

    
    public synchronized void addClientnick(String nick){
        clientnick.add(nick);

    }

   
    public synchronized void broadCastMsg(String msg){
        String str = new SimpleDateFormat("HH:mm:ss").format(Calendar.getInstance().getTime());
        msg =  str + " " + msg;

        for (ClientHandler c : client) {
            c.sendMsg(msg);
        }
    }

    
    public synchronized void removeClient(ClientHandler clientHandler){
        client.remove(clientHandler);
        broadCastMsg(clientHandler.getName() + " left chat");
        ArrayList<String> listuserArr = getClientnick();
        String listUser = "";
        for (String x: listuserArr) {
            listUser = listUser + " " + x;
        }
        for (ClientHandler c : client) {
            c.sendMsg("/listuser" + listUser);
        }

    }

    
    public synchronized void removeClientuser(String user){
        int numberuser = clientnick.indexOf(user);
        clientnick.remove(numberuser);
    }

    
    public synchronized ArrayList<String> getClientnick() {
        return clientnick;
    }

    
    public synchronized void renameClientuser(String nick, String oldnick){
        int numberuser = clientnick.indexOf(oldnick);
        clientnick.remove(numberuser);
        clientnick.add(nick);

        ArrayList<String> listuserArr = getClientnick();
        String listUser = "";
        for (String x: listuserArr) {
            listUser = listUser + " " + x;
        }
        for (ClientHandler c : client) {
            c.sendMsg("/listuserchang" + listUser);
        }
    }
}



class ClientHandler implements Runnable {
    private Socket s;
    private DataInputStream in;
    private DataOutputStream out;
    private static int CLIENT_COUNTER = 0;
    private String name;
    private MyServer owner;

    
    public ClientHandler(Socket s, MyServer owner) {
        this.s = s;
        name = "";
        this.owner = owner;
        try {
            in = new DataInputStream(s.getInputStream());
            out = new DataOutputStream(s.getOutputStream());
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Override
    public void run() {
        try {
            while (true) {

                String str = null;
                str = in.readUTF();

                if (str != null && name.isEmpty()) {
                    String[] arr = str.split("\\s");
                    if (arr.length == 3) {
                        
                        if (arr[0].equals("/auth")) {
                            String login = arr[1];
                            String pass = arr[2];
                            String nick = SQLHandler.getNickByLoginAndPassword(login, pass);
                            if (nick != null) {
                                synchronized (owner.getClient()) {
                                    if (!owner.isNickBusy(nick)) {
                                        name = nick;
                                        sendMsg("/yes " + getName());
                                        owner.addClientnick(nick);
                                        owner.addClient(this);
                                        ArrayList<String> listuserArr = owner.getClientnick();
                                        String listUser = "";
                                        for (String x: listuserArr) {
                                            listUser = listUser + " " + x;
                                        }

                                        sendMsg("/listuser" + listUser);
                                        continue;
                                    } else {
                                        sendMsg("NickBusy");
                                    }
                                }
                            } else if (nick == null) {
                                sendMsg("stop");
                            }

                        }
                    } else if (arr.length == 4) {
                        if (arr[0].equals("/reg")) {
                            String newlogin = arr[1];
                            String newpass = arr[2];
                            String newnick = arr[3];
                            if (SQLHandler.isWrongLogin(newlogin)) {
                                sendMsg("StopUser");
                            } else if (SQLHandler.isWrongNick(newnick)) {
                                sendMsg("StopNick");
                            } else if (!SQLHandler.isWrongLogin(newlogin) & !SQLHandler.isWrongNick(newnick)) {
                                SQLHandler.addEntry(newlogin, newpass, newnick);
                            }
                        }
                    }
                }
                if (str != null) {
                    if (str.startsWith("/")) {
                        if (str.equals("/end")) break;
                        if (str.startsWith("/pm")) {
                            String[] w = str.split("\\s");
                            String nick = w[1];
                            String msg = str.substring(w[0].length() + w[1].length() + 2);
                            if (!getName().equals(nick)) {
                                owner.sendPersonalMessage(nick, "Message от " + getName() + ": " + msg);
                                sendMsg(getName() + " send " + nick + " : " + msg);
                            }
                        }
                        if (str.startsWith("/changenick")) {
                            String[] w = str.split("\\s");
                            String nick = w[1];
                            String oldnick = getName();
                            owner.renameClientuser(nick,oldnick);
                            SQLHandler.changeNick(nick, oldnick);
                            setName(nick);
                            owner.broadCastMsg(oldnick + " change on " + nick);
                        }
                        continue;
                    }
                    System.out.println(name + " says: " + str);
                    owner.broadCastMsg(name + " " + str);

                }

                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            owner.removeClientuser(getName());
            owner.removeClient(this);
            ArrayList<String> listuserArr = owner.getClientnick();
            String listUser = "";
            for (String x: listuserArr) {
                listUser = listUser + " " + x;
            }
            sendMsg("/listuserrem" + listUser);
            try {
                s.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void sendMsg(String msg) {

        try {
            out.writeUTF(msg);
            out.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



class SQLHandler {
    private static Connection cn;
    private static PreparedStatement pr;
    public static void connect(){
        try {
            Class.forName("org.sqlite.JDBC");
            cn = DriverManager.getConnection("jdbc:sqlite:forChat.db");
            System.out.println("Base connect!");
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
    public static void disconnect(){
        try {
        if (cn!=null && !cn.isClosed())
            cn.close();
            System.out.println("Base disconnect");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static String getNickByLoginAndPassword(String login, String password){
        ResultSet rs;
        String str = null;

        try {
            pr = cn.prepareStatement("SELECT nickname FROM Main WHERE login = ? AND password = ?");
            pr.setString(1, login);
            pr.setString(2, password);
            rs = pr.executeQuery();
            while (rs.next()){
                str = rs.getString(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return str;
    }

    public static void changeNick(String newNick, String oldNick){
        try {
            pr = cn.prepareStatement("UPDATE Main SET nickname = ? WHERE nickname = ?;");
            pr.setString(1,newNick);
            pr.setString(2, oldNick);
            pr.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public static void addEntry(String login, String pass, String nick){
        try {
            pr = cn.prepareStatement("INSERT INTO Main(login, password,nickname) VALUES (?,?,?);");
            pr.setString(1, login);
            pr.setString(2, pass);
            pr.setString(3,nick);
            pr.execute();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public static boolean isWrongLogin(String login) {
        ResultSet rs;
        String str = null;
        try {
            pr = cn.prepareStatement("SELECT * FROM Main WHERE login = ?");
            pr.setString(1, login);
            rs = pr.executeQuery();
            while (rs.next()) {
                str = rs.getString(1);
                if(str == null){
                    return false;
                }
                return !str.equals(login);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public static boolean isWrongNick(String nick) {
        ResultSet rs;
        String str = null;
        try {
            pr = cn.prepareStatement("SELECT * FROM Main WHERE nickname = ?");
            pr.setString(1, nick);
            rs = pr.executeQuery();
            while (rs.next()) {
                str = rs.getString(1);
                if(str == null){
                    return false;
                }
                return !str.equals(nick);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }
}

